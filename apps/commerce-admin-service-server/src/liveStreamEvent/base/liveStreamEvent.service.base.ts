/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LiveStreamEvent as PrismaLiveStreamEvent,
} from "@prisma/client";

export class LiveStreamEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LiveStreamEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.liveStreamEvent.count(args);
  }

  async liveStreamEvents(
    args: Prisma.LiveStreamEventFindManyArgs
  ): Promise<PrismaLiveStreamEvent[]> {
    return this.prisma.liveStreamEvent.findMany(args);
  }
  async liveStreamEvent(
    args: Prisma.LiveStreamEventFindUniqueArgs
  ): Promise<PrismaLiveStreamEvent | null> {
    return this.prisma.liveStreamEvent.findUnique(args);
  }
  async createLiveStreamEvent(
    args: Prisma.LiveStreamEventCreateArgs
  ): Promise<PrismaLiveStreamEvent> {
    return this.prisma.liveStreamEvent.create(args);
  }
  async updateLiveStreamEvent(
    args: Prisma.LiveStreamEventUpdateArgs
  ): Promise<PrismaLiveStreamEvent> {
    return this.prisma.liveStreamEvent.update(args);
  }
  async deleteLiveStreamEvent(
    args: Prisma.LiveStreamEventDeleteArgs
  ): Promise<PrismaLiveStreamEvent> {
    return this.prisma.liveStreamEvent.delete(args);
  }
}
