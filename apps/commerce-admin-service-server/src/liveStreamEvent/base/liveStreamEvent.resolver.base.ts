/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { LiveStreamEvent } from "./LiveStreamEvent";
import { LiveStreamEventCountArgs } from "./LiveStreamEventCountArgs";
import { LiveStreamEventFindManyArgs } from "./LiveStreamEventFindManyArgs";
import { LiveStreamEventFindUniqueArgs } from "./LiveStreamEventFindUniqueArgs";
import { DeleteLiveStreamEventArgs } from "./DeleteLiveStreamEventArgs";
import { LiveStreamEventService } from "../liveStreamEvent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LiveStreamEvent)
export class LiveStreamEventResolverBase {
  constructor(
    protected readonly service: LiveStreamEventService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LiveStreamEvent",
    action: "read",
    possession: "any",
  })
  async _liveStreamEventsMeta(
    @graphql.Args() args: LiveStreamEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LiveStreamEvent])
  @nestAccessControl.UseRoles({
    resource: "LiveStreamEvent",
    action: "read",
    possession: "any",
  })
  async liveStreamEvents(
    @graphql.Args() args: LiveStreamEventFindManyArgs
  ): Promise<LiveStreamEvent[]> {
    return this.service.liveStreamEvents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LiveStreamEvent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LiveStreamEvent",
    action: "read",
    possession: "own",
  })
  async liveStreamEvent(
    @graphql.Args() args: LiveStreamEventFindUniqueArgs
  ): Promise<LiveStreamEvent | null> {
    const result = await this.service.liveStreamEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LiveStreamEvent)
  @nestAccessControl.UseRoles({
    resource: "LiveStreamEvent",
    action: "delete",
    possession: "any",
  })
  async deleteLiveStreamEvent(
    @graphql.Args() args: DeleteLiveStreamEventArgs
  ): Promise<LiveStreamEvent | null> {
    try {
      return await this.service.deleteLiveStreamEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
